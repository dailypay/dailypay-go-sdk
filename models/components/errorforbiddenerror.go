// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ErrorForbiddenErrorLinks - A list of links to resources that may be helpful in resolving the error.
type ErrorForbiddenErrorLinks struct {
	About *string `json:"about,omitempty"`
}

func (e *ErrorForbiddenErrorLinks) GetAbout() *string {
	if e == nil {
		return nil
	}
	return e.About
}

// ErrorForbiddenErrorSource - Location in the request that may have caused the error.
type ErrorForbiddenErrorSource struct {
	// The name of the parameter that caused the error.
	Parameter *string `json:"parameter,omitempty"`
	// A JSON Pointer to the location in the request that caused the error.
	Pointer *string `json:"pointer,omitempty"`
	// The name of the header that caused the error.
	Header *string `json:"header,omitempty"`
}

func (e *ErrorForbiddenErrorSource) GetParameter() *string {
	if e == nil {
		return nil
	}
	return e.Parameter
}

func (e *ErrorForbiddenErrorSource) GetPointer() *string {
	if e == nil {
		return nil
	}
	return e.Pointer
}

func (e *ErrorForbiddenErrorSource) GetHeader() *string {
	if e == nil {
		return nil
	}
	return e.Header
}

// ErrorForbiddenErrorMeta - Additional information about the error.
type ErrorForbiddenErrorMeta struct {
	// A UUID for the originating request.
	RequestID *string `json:"request_id,omitempty"`
	// An ID used for tracing purposes.
	TraceID *string `json:"trace_id,omitempty"`
}

func (e *ErrorForbiddenErrorMeta) GetRequestID() *string {
	if e == nil {
		return nil
	}
	return e.RequestID
}

func (e *ErrorForbiddenErrorMeta) GetTraceID() *string {
	if e == nil {
		return nil
	}
	return e.TraceID
}

// ErrorForbiddenErrorCode - A code that indicates what went wrong.
type ErrorForbiddenErrorCode string

const (
	ErrorForbiddenErrorCodeForbidden ErrorForbiddenErrorCode = "FORBIDDEN"
)

func (e ErrorForbiddenErrorCode) ToPointer() *ErrorForbiddenErrorCode {
	return &e
}
func (e *ErrorForbiddenErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FORBIDDEN":
		*e = ErrorForbiddenErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorForbiddenErrorCode: %v", v)
	}
}

type ErrorForbiddenError struct {
	// The HTTP status code for the error.
	Status string `json:"status"`
	// A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
	Detail string `json:"detail"`
	// A list of links to resources that may be helpful in resolving the error.
	Links ErrorForbiddenErrorLinks `json:"links"`
	// Location in the request that may have caused the error.
	Source *ErrorForbiddenErrorSource `json:"source,omitempty"`
	// Additional information about the error.
	Meta ErrorForbiddenErrorMeta `json:"meta"`
	// A code that indicates what went wrong.
	Code ErrorForbiddenErrorCode `json:"code"`
}

func (e *ErrorForbiddenError) GetStatus() string {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *ErrorForbiddenError) GetDetail() string {
	if e == nil {
		return ""
	}
	return e.Detail
}

func (e *ErrorForbiddenError) GetLinks() ErrorForbiddenErrorLinks {
	if e == nil {
		return ErrorForbiddenErrorLinks{}
	}
	return e.Links
}

func (e *ErrorForbiddenError) GetSource() *ErrorForbiddenErrorSource {
	if e == nil {
		return nil
	}
	return e.Source
}

func (e *ErrorForbiddenError) GetMeta() ErrorForbiddenErrorMeta {
	if e == nil {
		return ErrorForbiddenErrorMeta{}
	}
	return e.Meta
}

func (e *ErrorForbiddenError) GetCode() ErrorForbiddenErrorCode {
	if e == nil {
		return ErrorForbiddenErrorCode("")
	}
	return e.Code
}
