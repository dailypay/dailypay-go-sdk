// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DisallowReason - The statuses and required actions are:
// - `null` The person has not been disallowed, and is free to use DailyPay.
// - `INACTIVE` The person has not completed registration or account verification.
// - `DELINQUENT` The person has an outstanding, unrecoverable balance with DailyPay, and should contact support.
// - `BANNED` Access has been revoked.
type DisallowReason string

const (
	DisallowReasonInactive   DisallowReason = "INACTIVE"
	DisallowReasonDelinquent DisallowReason = "DELINQUENT"
	DisallowReasonBanned     DisallowReason = "BANNED"
)

func (e DisallowReason) ToPointer() *DisallowReason {
	return &e
}
func (e *DisallowReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INACTIVE":
		fallthrough
	case "DELINQUENT":
		fallthrough
	case "BANNED":
		*e = DisallowReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisallowReason: %v", v)
	}
}

// DailyPayCardProductEntitlement - The DailyPay Visa®️ Prepaid Card program.
type DailyPayCardProductEntitlement struct {
	// Whether the person is eligible to enroll in the DailyPay Visa®️ Prepaid Card program.
	//
	Eligible bool `json:"eligible"`
	// Whether the person is enrolled in the DailyPay Visa®️ Prepaid Card program.
	//
	Enrolled bool `json:"enrolled"`
}

func (d *DailyPayCardProductEntitlement) GetEligible() bool {
	if d == nil {
		return false
	}
	return d.Eligible
}

func (d *DailyPayCardProductEntitlement) GetEnrolled() bool {
	if d == nil {
		return false
	}
	return d.Enrolled
}

// Products that the person is enrolled in or eligible for.
type Products struct {
	// The DailyPay Visa®️ Prepaid Card program.
	//
	DailyPayCardProductEntitlement DailyPayCardProductEntitlement `json:"dailypay_card"`
}

func (p *Products) GetDailyPayCardProductEntitlement() DailyPayCardProductEntitlement {
	if p == nil {
		return DailyPayCardProductEntitlement{}
	}
	return p.DailyPayCardProductEntitlement
}

// PersonAttributes - A person is a record of someone known to DailyPay. There will only ever be one person record per human being.
type PersonAttributes struct {
	// The statuses and required actions are:
	// - `null` The person has not been disallowed, and is free to use DailyPay.
	// - `INACTIVE` The person has not completed registration or account verification.
	// - `DELINQUENT` The person has an outstanding, unrecoverable balance with DailyPay, and should contact support.
	// - `BANNED` Access has been revoked.
	//
	DisallowReason *DisallowReason `json:"disallow_reason"`
	// The two-letter abbreviation for the state in which the person resides, if located in the United States.  This is used for regulatory compliance purposes.
	//
	StateOfResidence *string `json:"state_of_residence,omitempty"`
	// Products that the person is enrolled in or eligible for.
	//
	Products Products `json:"products"`
}

func (p *PersonAttributes) GetDisallowReason() *DisallowReason {
	if p == nil {
		return nil
	}
	return p.DisallowReason
}

func (p *PersonAttributes) GetStateOfResidence() *string {
	if p == nil {
		return nil
	}
	return p.StateOfResidence
}

func (p *PersonAttributes) GetProducts() Products {
	if p == nil {
		return Products{}
	}
	return p.Products
}
