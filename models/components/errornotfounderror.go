// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ErrorNotFoundErrorLinks - A list of links to resources that may be helpful in resolving the error.
type ErrorNotFoundErrorLinks struct {
	About *string `json:"about,omitempty"`
}

func (e *ErrorNotFoundErrorLinks) GetAbout() *string {
	if e == nil {
		return nil
	}
	return e.About
}

// ErrorNotFoundErrorSource - Location in the request that may have caused the error.
type ErrorNotFoundErrorSource struct {
	// The name of the parameter that caused the error.
	Parameter *string `json:"parameter,omitempty"`
	// A JSON Pointer to the location in the request that caused the error.
	Pointer *string `json:"pointer,omitempty"`
	// The name of the header that caused the error.
	Header *string `json:"header,omitempty"`
}

func (e *ErrorNotFoundErrorSource) GetParameter() *string {
	if e == nil {
		return nil
	}
	return e.Parameter
}

func (e *ErrorNotFoundErrorSource) GetPointer() *string {
	if e == nil {
		return nil
	}
	return e.Pointer
}

func (e *ErrorNotFoundErrorSource) GetHeader() *string {
	if e == nil {
		return nil
	}
	return e.Header
}

// ErrorNotFoundErrorMeta - Additional information about the error.
type ErrorNotFoundErrorMeta struct {
	// A UUID for the originating request.
	RequestID *string `json:"request_id,omitempty"`
	// An ID used for tracing purposes.
	TraceID *string `json:"trace_id,omitempty"`
}

func (e *ErrorNotFoundErrorMeta) GetRequestID() *string {
	if e == nil {
		return nil
	}
	return e.RequestID
}

func (e *ErrorNotFoundErrorMeta) GetTraceID() *string {
	if e == nil {
		return nil
	}
	return e.TraceID
}

// ErrorNotFoundErrorCode - A code that indicates what went wrong.
type ErrorNotFoundErrorCode string

const (
	ErrorNotFoundErrorCodeRecordNotFound ErrorNotFoundErrorCode = "RECORD_NOT_FOUND"
	ErrorNotFoundErrorCodeNotFound       ErrorNotFoundErrorCode = "NOT_FOUND"
)

func (e ErrorNotFoundErrorCode) ToPointer() *ErrorNotFoundErrorCode {
	return &e
}
func (e *ErrorNotFoundErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECORD_NOT_FOUND":
		fallthrough
	case "NOT_FOUND":
		*e = ErrorNotFoundErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorNotFoundErrorCode: %v", v)
	}
}

type ErrorNotFoundError struct {
	// The HTTP status code for the error.
	Status string `json:"status"`
	// A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
	Detail string `json:"detail"`
	// A list of links to resources that may be helpful in resolving the error.
	Links ErrorNotFoundErrorLinks `json:"links"`
	// Location in the request that may have caused the error.
	Source *ErrorNotFoundErrorSource `json:"source,omitempty"`
	// Additional information about the error.
	Meta ErrorNotFoundErrorMeta `json:"meta"`
	// A code that indicates what went wrong.
	Code ErrorNotFoundErrorCode `json:"code"`
}

func (e *ErrorNotFoundError) GetStatus() string {
	if e == nil {
		return ""
	}
	return e.Status
}

func (e *ErrorNotFoundError) GetDetail() string {
	if e == nil {
		return ""
	}
	return e.Detail
}

func (e *ErrorNotFoundError) GetLinks() ErrorNotFoundErrorLinks {
	if e == nil {
		return ErrorNotFoundErrorLinks{}
	}
	return e.Links
}

func (e *ErrorNotFoundError) GetSource() *ErrorNotFoundErrorSource {
	if e == nil {
		return nil
	}
	return e.Source
}

func (e *ErrorNotFoundError) GetMeta() ErrorNotFoundErrorMeta {
	if e == nil {
		return ErrorNotFoundErrorMeta{}
	}
	return e.Meta
}

func (e *ErrorNotFoundError) GetCode() ErrorNotFoundErrorCode {
	if e == nil {
		return ErrorNotFoundErrorCode("")
	}
	return e.Code
}
