// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/dailypay/dailypay-go-sdk/internal/utils"
)

// TransferDestinationCapabilitySchedule - The expected time for the transfer to be completed.
type TransferDestinationCapabilitySchedule string

const (
	TransferDestinationCapabilityScheduleWithinThirtyMinutes TransferDestinationCapabilitySchedule = "WITHIN_THIRTY_MINUTES"
	TransferDestinationCapabilityScheduleNextBusinessDay     TransferDestinationCapabilitySchedule = "NEXT_BUSINESS_DAY"
)

func (e TransferDestinationCapabilitySchedule) ToPointer() *TransferDestinationCapabilitySchedule {
	return &e
}
func (e *TransferDestinationCapabilitySchedule) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WITHIN_THIRTY_MINUTES":
		fallthrough
	case "NEXT_BUSINESS_DAY":
		*e = TransferDestinationCapabilitySchedule(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferDestinationCapabilitySchedule: %v", v)
	}
}

type TransferDestinationCapability struct {
	// The expected time for the transfer to be completed.
	Schedule TransferDestinationCapabilitySchedule `json:"schedule"`
	// A monetary quantity expressed in units of the lowest denomination in
	// the associated currency. For example, `{ amount: 299, currency: 'USD'
	// }` resolves to $2.99.
	//
	// If a transfer incurs a fee, the fee will be deducted from the amount of
	// the transfer.
	//
	Fee int64 `json:"fee"`
	// A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
	Currency string `json:"currency"`
}

func (t TransferDestinationCapability) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransferDestinationCapability) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"schedule", "fee", "currency"}); err != nil {
		return err
	}
	return nil
}

func (t *TransferDestinationCapability) GetSchedule() TransferDestinationCapabilitySchedule {
	if t == nil {
		return TransferDestinationCapabilitySchedule("")
	}
	return t.Schedule
}

func (t *TransferDestinationCapability) GetFee() int64 {
	if t == nil {
		return 0
	}
	return t.Fee
}

func (t *TransferDestinationCapability) GetCurrency() string {
	if t == nil {
		return ""
	}
	return t.Currency
}
