// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ActivationStatus - Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.
//
// To deactivate a job, update activation_status to `DEACTIVATED`.
type ActivationStatus string

const (
	ActivationStatusDeactivated           ActivationStatus = "DEACTIVATED"
	ActivationStatusDeactivationPending   ActivationStatus = "DEACTIVATION_PENDING"
	ActivationStatusActivationRequired    ActivationStatus = "ACTIVATION_REQUIRED"
	ActivationStatusActivationUnderReview ActivationStatus = "ACTIVATION_UNDER_REVIEW"
	ActivationStatusActivated             ActivationStatus = "ACTIVATED"
)

func (e ActivationStatus) ToPointer() *ActivationStatus {
	return &e
}
func (e *ActivationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEACTIVATED":
		fallthrough
	case "DEACTIVATION_PENDING":
		fallthrough
	case "ACTIVATION_REQUIRED":
		fallthrough
	case "ACTIVATION_UNDER_REVIEW":
		fallthrough
	case "ACTIVATED":
		*e = ActivationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivationStatus: %v", v)
	}
}

type Frequency string

const (
	FrequencyHourly       Frequency = "HOURLY"
	FrequencyWeekly       Frequency = "WEEKLY"
	FrequencyBiweekly     Frequency = "BIWEEKLY"
	FrequencyTwiceMonthly Frequency = "TWICE_MONTHLY"
	FrequencyMonthly      Frequency = "MONTHLY"
	FrequencyAnnually     Frequency = "ANNUALLY"
)

func (e Frequency) ToPointer() *Frequency {
	return &e
}
func (e *Frequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HOURLY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "BIWEEKLY":
		fallthrough
	case "TWICE_MONTHLY":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "ANNUALLY":
		*e = Frequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Frequency: %v", v)
	}
}

type WageRate struct {
	// A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
	Amount int64 `json:"amount"`
	// A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
	Currency  string    `json:"currency"`
	Frequency Frequency `json:"frequency"`
}

func (w *WageRate) GetAmount() int64 {
	if w == nil {
		return 0
	}
	return w.Amount
}

func (w *WageRate) GetCurrency() string {
	if w == nil {
		return ""
	}
	return w.Currency
}

func (w *WageRate) GetFrequency() Frequency {
	if w == nil {
		return Frequency("")
	}
	return w.Frequency
}

// DirectDepositStatus - - `SETUP_REQUIRED` Direct deposit is not set up for this Job. Update this resource's relationships to set up direct deposit.
// - `SETUP_PENDING` A system action is still pending.
// - `SETUP_COMPLETE` Direct deposit is set up for this Job.
type DirectDepositStatus string

const (
	DirectDepositStatusSetupRequired DirectDepositStatus = "SETUP_REQUIRED"
	DirectDepositStatusSetupPending  DirectDepositStatus = "SETUP_PENDING"
	DirectDepositStatusSetupComplete DirectDepositStatus = "SETUP_COMPLETE"
)

func (e DirectDepositStatus) ToPointer() *DirectDepositStatus {
	return &e
}
func (e *DirectDepositStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SETUP_REQUIRED":
		fallthrough
	case "SETUP_PENDING":
		fallthrough
	case "SETUP_COMPLETE":
		*e = DirectDepositStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectDepositStatus: %v", v)
	}
}

type JobAttributes struct {
	// Holds unique identifiers for the employee or job defined by external organizations.
	ExternalIdentifiers map[string]string `json:"external_identifiers,omitempty"`
	// The first name of the person as it is listed in their employee profile.
	FirstName *string `json:"first_name,omitempty"`
	// The last name of the person as it is listed in their employee profile.
	LastName *string `json:"last_name,omitempty"`
	// Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.
	//
	// To deactivate a job, update activation_status to `DEACTIVATED`.
	//
	ActivationStatus *ActivationStatus `json:"activation_status,omitempty"`
	WageRate         WageRate          `json:"wage_rate"`
	Title            *string           `json:"title,omitempty"`
	Department       *string           `json:"department,omitempty"`
	Location         *string           `json:"location,omitempty"`
	// - `SETUP_REQUIRED` Direct deposit is not set up for this Job. Update this resource's relationships to set up direct deposit.
	// - `SETUP_PENDING` A system action is still pending.
	// - `SETUP_COMPLETE` Direct deposit is set up for this Job.
	//
	DirectDepositStatus DirectDepositStatus `json:"direct_deposit_status"`
}

func (j *JobAttributes) GetExternalIdentifiers() map[string]string {
	if j == nil {
		return nil
	}
	return j.ExternalIdentifiers
}

func (j *JobAttributes) GetFirstName() *string {
	if j == nil {
		return nil
	}
	return j.FirstName
}

func (j *JobAttributes) GetLastName() *string {
	if j == nil {
		return nil
	}
	return j.LastName
}

func (j *JobAttributes) GetActivationStatus() *ActivationStatus {
	if j == nil {
		return nil
	}
	return j.ActivationStatus
}

func (j *JobAttributes) GetWageRate() WageRate {
	if j == nil {
		return WageRate{}
	}
	return j.WageRate
}

func (j *JobAttributes) GetTitle() *string {
	if j == nil {
		return nil
	}
	return j.Title
}

func (j *JobAttributes) GetDepartment() *string {
	if j == nil {
		return nil
	}
	return j.Department
}

func (j *JobAttributes) GetLocation() *string {
	if j == nil {
		return nil
	}
	return j.Location
}

func (j *JobAttributes) GetDirectDepositStatus() DirectDepositStatus {
	if j == nil {
		return DirectDepositStatus("")
	}
	return j.DirectDepositStatus
}

type JobAttributesInput struct {
	// Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.
	//
	// To deactivate a job, update activation_status to `DEACTIVATED`.
	//
	ActivationStatus *ActivationStatus `json:"activation_status,omitempty"`
}

func (j *JobAttributesInput) GetActivationStatus() *ActivationStatus {
	if j == nil {
		return nil
	}
	return j.ActivationStatus
}
