// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/dailypay/dailypay-go-sdk/internal/utils"
	"github.com/dailypay/dailypay-go-sdk/models/components"
)

type CreateTransferGlobals struct {
	// The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
	//
	Version *int64 `default:"3" header:"style=simple,explode=false,name=DailyPay-API-Version"`
}

func (c CreateTransferGlobals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTransferGlobals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (c *CreateTransferGlobals) GetVersion() *int64 {
	if c == nil {
		return nil
	}
	return c.Version
}

type CreateTransferRequest struct {
	// An idempotency key is a unique string that you provide to ensure a request is only processed once.
	// Any number of requests with the same idempotency key and payload will return an identical response.
	//
	IdempotencyKey string `header:"style=simple,explode=false,name=Idempotency-Key"`
	// Add related resources to the response.
	//
	// The value of the include parameter must be a comma-separated (U+002C COMMA, “,”) list of relationship paths.
	//
	Include            *string                       `queryParam:"style=form,explode=true,name=include"`
	TransferCreateData components.TransferCreateData `request:"mediaType=application/vnd.api+json"`
}

func (c *CreateTransferRequest) GetIdempotencyKey() string {
	if c == nil {
		return ""
	}
	return c.IdempotencyKey
}

func (c *CreateTransferRequest) GetInclude() *string {
	if c == nil {
		return nil
	}
	return c.Include
}

func (c *CreateTransferRequest) GetTransferCreateData() components.TransferCreateData {
	if c == nil {
		return components.TransferCreateData{}
	}
	return c.TransferCreateData
}

type CreateTransferResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Returns the newly created transfer object.
	TransferData *components.TransferData
}

func (c *CreateTransferResponse) GetHTTPMeta() components.HTTPMetadata {
	if c == nil {
		return components.HTTPMetadata{}
	}
	return c.HTTPMeta
}

func (c *CreateTransferResponse) GetTransferData() *components.TransferData {
	if c == nil {
		return nil
	}
	return c.TransferData
}
