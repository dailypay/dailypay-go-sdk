overlay: 1.0.0
info:
  title: CodeSamples overlay for go target
  version: 0.0.0
actions:
  - target: $["paths"]["/cards/generic"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createGenericCardToken
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New()

                res, err := s.Cards.Create(ctx, operations.CreateGenericCardTokenRequest{
                    FirstName: "Edith",
                    LastName: "Clarke",
                    CardNumber: "4007589999999912",
                    ExpirationYear: "2027",
                    ExpirationMonth: "02",
                    Cvv: dailypay.String("123"),
                    AddressLineOne: "123 Kebly Street",
                    AddressLineTwo: dailypay.String("Unit C"),
                    AddressCity: "Fort Lee",
                    AddressState: "NJ",
                    AddressZipCode: "07237",
                    AddressCountry: "US",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.Object != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listAccounts
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Accounts.List(ctx, operations.ListAccountsRequest{
                    FilterAccountType: components.FilterAccountTypeEarningsBalance.ToPointer(),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.AccountsData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/accounts"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createAccount
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Accounts.Create(ctx, components.AccountDataInput{
                    Data: components.AccountResourceInput{
                        Attributes: components.CreateAccountAttributesInputDepositoryInput(
                            components.DepositoryInput{
                                Name: "Acme Bank Checking Account",
                                Subtype: components.AccountAttributesDepositorySubtypeChecking,
                                DepositoryAccountDetails: components.DepositoryAccountDetails{
                                    FirstName: "Edith",
                                    LastName: "Clarke",
                                    RoutingNumber: "XXXXX2021",
                                    AccountNumber: "XXXXXX4321",
                                },
                            },
                        ),
                        Relationships: components.AccountRelationships{
                            Person: components.PersonRelationship{
                                Data: components.PersonIdentifier{
                                    ID: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
                                },
                            },
                        },
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.AccountData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/accounts/{account_id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: readAccount
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Accounts.Read(ctx, operations.ReadAccountRequest{
                    AccountID: "2bc7d781-3247-46f6-b60f-4090d214936a",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.AccountData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/health"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: getHealth
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Health.GetHealth(ctx)
                if err != nil {
                    log.Fatal(err)
                }
                if res.Health200 != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listJobs
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Jobs.List(ctx, operations.ListJobsRequest{})
                if err != nil {
                    log.Fatal(err)
                }
                if res.JobsData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/jobs/{job_id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: readJob
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Jobs.Read(ctx, operations.ReadJobRequest{
                    JobID: "aa860051-c411-4709-9685-c1b716df611b",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.JobData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/jobs/{job_id}"]["patch"]
    update:
      x-codeSamples:
        - lang: go
          label: updateJob
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Jobs.Update(ctx, operations.UpdateJobRequest{
                    JobID: "e9d84b0d-92ba-43c9-93bf-7c993313fa6f",
                    JobUpdateData: components.JobUpdateData{
                        Data: components.Data{
                            ID: "e9d84b0d-92ba-43c9-93bf-7c993313fa6f",
                            Attributes: &components.JobAttributesInput{
                                ActivationStatus: components.ActivationStatusDeactivated.ToPointer(),
                            },
                            Relationships: &components.JobRelationshipsInput{
                                DirectDepositDefaultDepository: &components.AccountRelationship{
                                    Data: components.AccountIdentifier{
                                        ID: "2bc7d781-3247-46f6-b60f-4090d214936a",
                                    },
                                },
                                DirectDepositDefaultCard: &components.AccountRelationship{
                                    Data: components.AccountIdentifier{
                                        ID: "2bc7d781-3247-46f6-b60f-4090d214936a",
                                    },
                                },
                            },
                        },
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.JobData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/organizations"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listOrganizations
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Organizations.List(ctx, operations.ListOrganizationsRequest{})
                if err != nil {
                    log.Fatal(err)
                }
                if res.OrganizationsData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/organizations/{organization_id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: readOrganization
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Organizations.Read(ctx, operations.ReadOrganizationRequest{
                    OrganizationID: "123e4567-e89b-12d3-a456-426614174000",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.OrganizationData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/paychecks"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listPaychecks
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/types"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Paychecks.List(ctx, operations.ListPaychecksRequest{
                    FilterDepositExpectedAtGte: types.MustNewTimeFromString("2023-03-15T04:00:00Z"),
                    FilterDepositExpectedAtLt: types.MustNewTimeFromString("2023-03-15T04:00:00Z"),
                    FilterPayPeriodEndsAtGte: types.MustNewTimeFromString("2023-03-15T04:00:00Z"),
                    FilterPayPeriodEndsAtLt: types.MustNewTimeFromString("2023-03-15T04:00:00Z"),
                    FilterPayPeriodStartsAtGte: types.MustNewTimeFromString("2023-03-15T04:00:00Z"),
                    FilterPayPeriodStartsAtLt: types.MustNewTimeFromString("2023-03-15T04:00:00Z"),
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.PaychecksData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/paychecks/{paycheck_id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: readPaycheck
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Paychecks.Read(ctx, operations.ReadPaycheckRequest{
                    PaycheckID: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.PaycheckData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/people/{person_id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: readPerson
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.People.Read(ctx, operations.ReadPersonRequest{
                    PersonID: "aa860051-c411-4709-9685-c1b716df611b",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.PersonData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/people/{person_id}"]["patch"]
    update:
      x-codeSamples:
        - lang: go
          label: updatePerson
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.People.Update(ctx, operations.UpdatePersonRequest{
                    PersonID: "aa860051-c411-4709-9685-c1b716df611b",
                    PersonData: components.PersonDataInput{
                        Data: components.PersonResourceInput{
                            ID: "aa860051-c411-4709-9685-c1b716df611b",
                            Attributes: components.PersonAttributesInput{
                                StateOfResidence: dailypay.String("NY"),
                            },
                        },
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.PersonData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/transfers"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: listTransfers
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Transfers.List(ctx, operations.ListTransfersRequest{})
                if err != nil {
                    log.Fatal(err)
                }
                if res.TransfersData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/transfers"]["post"]
    update:
      x-codeSamples:
        - lang: go
          label: createTransfer
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Transfers.Create(ctx, operations.CreateTransferRequest{
                    IdempotencyKey: "ea9f2225-403b-4e2c-93b0-0eda090ffa65",
                    TransferCreateData: components.TransferCreateData{
                        Data: components.TransferCreateResource{
                            ID: dailypay.String("aba332a2-24a2-46de-8257-5040e71ab210"),
                            Attributes: components.TransferAttributesInput{
                                Preview: dailypay.Bool(true),
                                Amount: 2500,
                                Currency: "USD",
                                Schedule: components.TransferAttributesScheduleWithinThirtyMinutes,
                            },
                            Relationships: components.TransferCreateRelationships{
                                Origin: components.AccountRelationship{
                                    Data: components.AccountIdentifier{
                                        ID: "2bc7d781-3247-46f6-b60f-4090d214936a",
                                    },
                                },
                                Destination: components.AccountRelationship{
                                    Data: components.AccountIdentifier{
                                        ID: "2bc7d781-3247-46f6-b60f-4090d214936a",
                                    },
                                },
                                Person: components.PersonRelationship{
                                    Data: components.PersonIdentifier{
                                        ID: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
                                    },
                                },
                            },
                        },
                    },
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.TransferData != nil {
                    // handle response
                }
            }
  - target: $["paths"]["/rest/transfers/{transfer_id}"]["get"]
    update:
      x-codeSamples:
        - lang: go
          label: readTransfer
          source: |-
            package main

            import(
            	"context"
            	dailypay "github.com/dailypay/dailypay-go-sdk"
            	"github.com/dailypay/dailypay-go-sdk/models/components"
            	"github.com/dailypay/dailypay-go-sdk/models/operations"
            	"log"
            )

            func main() {
                ctx := context.Background()

                s := dailypay.New(
                    dailypay.WithVersion(3),
                    dailypay.WithSecurity(components.Security{
                        OauthUserToken: dailypay.String("<YOUR_OAUTH_USER_TOKEN_HERE>"),
                    }),
                )

                res, err := s.Transfers.Read(ctx, operations.ReadTransferRequest{
                    TransferID: "aba332a2-24a2-46de-8257-5040e71ab210",
                })
                if err != nil {
                    log.Fatal(err)
                }
                if res.TransferData != nil {
                    // handle response
                }
            }
