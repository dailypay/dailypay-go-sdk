// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package dailypay

// Generated from OpenAPI doc version 3.0.0-beta01 and generator version 2.674.3

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/dailypay/dailypay-go-sdk/internal/config"
	"github.com/dailypay/dailypay-go-sdk/internal/globals"
	"github.com/dailypay/dailypay-go-sdk/internal/hooks"
	"github.com/dailypay/dailypay-go-sdk/internal/utils"
	"github.com/dailypay/dailypay-go-sdk/models/components"
	"github.com/dailypay/dailypay-go-sdk/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.{environment}.com",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// SDK - DailyPay Public Rest API: # Welcome
//
// This site contains information on basic DailyPay concepts and instructions for using the endpoints of each API. We are just now getting started with our public documentation - please let us know if you have any feedback or questions via Suggested Edits, where you can suggest changes to the documentation directly from the portal.
//
// Here are some links to help you get familiar with the DailyPay basics:
//
// [API Versioning](/tag/Getting-Started#section/DailyPay's-API-Versioning) — Find out how we version our APIs.
// [Environments](/tag/Getting-Started#section/Environments) — Get an overview of the different environments in the DailyPay API.
// [Glossary](/tag/Glossary) — Explore a list of terms used in the DailyPay API.
type SDK struct {
	SDKVersion string
	// The _jobs_ endpoint provides access to comprehensive information
	// about a person's employment. It enables you to retrieve details about
	// individual jobs, including information about the organization
	// they work for, status, wage rate, job title, location,
	// paycheck settings, and related links to associated accounts.
	//
	Jobs *Jobs
	// The _accounts_ endpoint provides comprehensive information about money
	// accounts. You can retrieve account details, including the
	// account's unique ID, a link to the account holder, type, subtype,
	// verification status, balance details, transfer capabilities, and
	// user-specific information such as names, routing numbers, and partial
	// account numbers.
	//
	//
	// **Functionality:** Access detailed user account information, verify
	// account balances, view transfer capabilities, and access user-specific
	// details associated with each account.
	//
	Accounts *Accounts
	// The _transfers_ endpoint allows you to initiate and track money movement.  You can access transfer details, including the transfer's unique ID, amount, currency, status, schedule, submission and resolution times, fees, and related links to the involved parties.
	//
	// **Functionality** Retrieve transfer information, monitor transfer statuses, view transfer schedules, and access relevant links for the source, destination, and origin of the transfer.
	//
	// **Important** - Account origin: a user initiated movement of money from one account to another - Paycheck origin: an automatic (system-generated) movement of money as part of payroll
	//
	Transfers *Transfers
	// The _paychecks_ endpoint provides detailed information about paychecks.
	// You can retrieve individual paycheck details, including the
	// person and job associated with the paycheck, its status, pay period,
	// expected deposit date, total debited amount, withholdings, earnings, and
	// currency.
	//
	// **Functionality:** Retrieve specific paycheck details, including payee and
	// job information, and monitor the status and financial details of each
	// paycheck.
	//
	Paychecks *Paychecks
	// The _organizations_ endpoint provides details about a business entity,
	// such as an employer, or a group of people, such as a division.
	//
	// The response includes the organization name and ID which can be used to
	// make subsequent endpoint calls related to the organization and its
	// employees.
	//
	Organizations *Organizations
	// The _people_ endpoint allows you to see information related to who owns
	// resources such as jobs and accounts.
	//
	// **Functionality:** Retrieve limited details about a person, including
	// their name, global status, and state of residence.
	//
	People *People
	// ## What is the Payments API?
	//
	// The Payments API is a PCI compliant endpoint and allows for secure debit card token creation. These tokens are used within DailyPay's APIs. When a tokenized debit card is added to a user’s account they can begin to take instant transfers.
	//
	// **How does this work?** A user's debit card data is sent via POST request to the Payments API. The debit card data is encrypted and tokenized before being returned. This tokenized card data is used for instant transfers via the Extend API.
	//
	// ### What is PCI compliance?
	//
	// It’s how we keep card data secure. DailyPay has a responsibility and legal requirement to protect debit card data therefore the Payments API endpoint complies with the Payment Card Industry Data Security Standards [PCI DSS](https://www.pcisecuritystandards.org/).
	//
	// > 📘 **Info**
	// > DailyPay only handles card data during encryption and tokenization
	// > **The Payments server is DailyPay’s only PCI compliant API.**
	//
	// ## Create a Debit Card Token
	//
	// Steps to create a tokenized debit card for use within DailyPay's APIs.
	//
	// ### 1. POST debit card data to the Payments API
	//
	// After you have securely collected the debit card data for a user, create a POST to the PCI compliant payments endpoint [`POST Generic Card`](/v2/tag/Card-Creation) with the following required parameters in this example.
	//
	// ```json
	// {
	//   "first_name": "Edith",
	//   "last_name": "Clarke",
	//   "card_number": "4007589999999912",
	//   "expiration_year": "2027",
	//   "expiration_month": "02",
	//   "cvv": "123",
	//   "address_line_one": "1234 Street",
	//   "address_city": "Fort Lee",
	//   "address_state": "NJ",
	//   "address_zip_code": "07237",
	//   "address_country": "US"
	// }
	// ```
	//
	// ### 2. Receive and handle the tokenized card data
	//
	// The [payments endpoint](https://developer.dailypay.com/v2/reference/post_cards-generic) returns an opaque string representing the card details. This token is encrypted and complies with PCI DSS. You will need the token for step 3, after which it can be discarded. The token is a long string and will look similar to below:
	//
	// ```json
	// {"token":"eyJhbGciOiJSU0Et.....T0FFU”}
	// ```
	//
	// ### 3. POST the token to the Extend API
	//
	// > 📘 **Important** > [Proper authorization](/v2/tag/Authorization) is required to create a transfer account.
	//
	// Send the encrypted token in a POST request to the [transfer accounts endpoint](/v2/tag/Users#operation/createTransferAccount) as the value for the `generic_token` field. This will create a transfer account and allow a user to start taking transfers.
	//
	Cards *Cards
	// The _health_ endpoint provides a simple health check for the API.
	//
	// **Functionality:** Check the status of the API to ensure it is functioning
	// correctly.
	//
	Health *Health

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *SDK) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

type ServerEnvironment string

const (
	ServerEnvironmentDailypay    ServerEnvironment = "dailypay"
	ServerEnvironmentDailypayuat ServerEnvironment = "dailypayuat"
)

func (e ServerEnvironment) ToPointer() *ServerEnvironment {
	return &e
}
func (e *ServerEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dailypay":
		fallthrough
	case "dailypayuat":
		*e = ServerEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServerEnvironment: %v", v)
	}
}

// WithEnvironment allows setting the environment variable for url substitution
func WithEnvironment(environment ServerEnvironment) SDKOption {
	return func(sdk *SDK) {
		for idx := range sdk.sdkConfiguration.ServerVariables {
			if _, ok := sdk.sdkConfiguration.ServerVariables[idx]["environment"]; !ok {
				continue
			}

			sdk.sdkConfiguration.ServerVariables[idx]["environment"] = fmt.Sprintf("%v", environment)
		}
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

// WithVersion allows setting the Version parameter for all supported operations
func WithVersion(version int64) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Globals.Version = &version
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		SDKVersion: "0.0.1",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 0.0.1 2.674.3 3.0.0-beta01 github.com/dailypay/dailypay-go-sdk",
			Globals:    globals.Globals{},
			ServerList: ServerList,
			ServerVariables: []map[string]string{
				{
					"environment": "dailypay",
				},
			},
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	sdk.sdkConfiguration = sdk.hooks.SDKInit(sdk.sdkConfiguration)

	sdk.Jobs = newJobs(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Accounts = newAccounts(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Transfers = newTransfers(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Paychecks = newPaychecks(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Organizations = newOrganizations(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.People = newPeople(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Cards = newCards(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Health = newHealth(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
